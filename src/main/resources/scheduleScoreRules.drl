package kz.bee.drools.planner.schedule.solver;
    dialect "java"

import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreHolder;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import kz.bee.drools.planner.schedule.domain.Class;
import kz.bee.drools.planner.schedule.domain.Lesson;
import kz.bee.drools.planner.schedule.domain.School;
import kz.bee.drools.planner.schedule.domain.UnavailablePeriodConstraint;

global HardAndSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################
/*
//#
// Two lessons in the same room at the same period.
//#
rule "twoLessonSameTimeSameRoom"
	when
		$lesson1 : Lesson($id : id, $period : period, $room : room)
		$lesson2 : Lesson(id != $id, period == $period, room == $room)
	then
		insertLogical(new IntConstraintOccurrence("twoLessonSameTimeSameRoom", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end
*/
/*//#
// Two classes in the same room at the same period.
//#
rule "twoClassSameTimeSameRoom"
	when
		$lesson1 : Lesson($id : id, $period : period, $room : room, $clazz : course.clazz)
		$lesson2 : Lesson(id != $id, period == $period, room == $room, course.clazz != $clazz)
	then
		insertLogical(new IntConstraintOccurrence("twoClassSameTimeSameRoom",
							ConstraintType.NEGATIVE_HARD, 1, 
							$lesson1, $lesson2));
end
*/

//#
// A different classes(two wx_group child classes) in the same period with different lessons.
//#
rule "wxGroupChildClassesInSamePeriodWithDiffLessons"
	when
		School( type in ("School", "College") )
		$lesson1 : Lesson($id : id, $period : period, $wxGroupName : course.clazz.wxGroupName, $clazz : course.clazz, $courseName : course.name ) 
		$lesson2 : Lesson(id != $id, period == $period, course.clazz.wxGroupName == $wxGroupName, course.clazz != $clazz, course.name != $courseName ) 
	then
		insertLogical(new IntConstraintOccurrence("wxGroupChildClassesInSamePeriodWithDiffLessons", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end

//#
// A same class(wx_group and all its child classes) in the same period with diffrent lessons.
//#
rule "wxGroupChildClassInSamePeriodWithDiffLessons"
	when
	 	School( type in ("School", "College") )
		$lesson1 : Lesson($id : id, $period : period, $wxGroupName : course.clazz.wxGroupName, $clazz : course.clazz, $courseName : course.name ) 
		$lesson2 : Lesson(id != $id, period == $period, course.clazz.wxGroupName == $wxGroupName, course.clazz == $clazz, course.name != $courseName ) 
	then
		insertLogical(new IntConstraintOccurrence("wxGroupChildClassInSamePeriodWithDiffLessons", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end

//#
// Lessons with a same class in the same period.
//#
rule "lessonsWithSameClassInSamePeriod"
	when
		School( type in ("School", "College") )
		$lesson1 : Lesson($id : id, $period : period, $clazz : course.clazz ) 
		$lesson2 : Lesson(id != $id, period == $period, course.clazz == $clazz ) 
	then
		insertLogical(new IntConstraintOccurrence("lessonsWithSameClassInSamePeriod", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end


//#
// Repeated lessons in the same day(day is the attribute of the Period).
//#
rule "repeatedLessonsInSameDay"
	when
		School( type in ("School", "College") )
		$lesson1 : Lesson($id : id, period != null, $period : period, $course : course ) 
		$lesson2 : Lesson(id != $id, period != null, period.day == $period.day, course == $course )
	then
		insertLogical(new IntConstraintOccurrence("repeatedLessonsInSameDay", 
							ConstraintType.NEGATIVE_HARD, 2,
							$lesson1, $lesson2));
end


//#
// Collecting lessons of divided classes to a same period
//#
rule "dividedClassLessonsInSamePeriod"
	when
		School( type in ("School","College") )
		$lesson : Lesson($id : id, $period : period, $clazz : course.clazz)
        $lessonCount : Number(intValue > 1) from accumulate(
            $lesson2 : Lesson(id != $id, period == $period, course.clazz == $clazz)
            count($lesson2)
        )
	then
		insertLogical(new IntConstraintOccurrence("dividedClassLessonsInSamePeriod", 
							ConstraintType.NEGATIVE_HARD, 2,
							$lesson, $lessonCount));
end


//#
// Lessons with a same teacher in the same period.
//#
rule "lessonsWithSameTeacherInSamePeriod"
	when
		School( type in ("School", "College") )
		$lesson1 : Lesson($id : id, $period : period, $teacher : teacher)
		$lesson2 : Lesson(id != $id, period == $period, teacher == $teacher)
	then
		//System.out.println("then lessonsWithSameTeacherInSamePeriod");
		insertLogical(new IntConstraintOccurrence("lessonsWithSameTeacherInSamePeriod",
							ConstraintType.NEGATIVE_HARD, 1, 
							$lesson1, $lesson2));
end

//#
// Sum of Lesson.duration must not exceed Period.duration.
//#
rule "lessonsDurationSumLePeriodDuration"
	when
		School( type == "College" )
		$lesson : Lesson(period != null, $periodTimeValue : period.time.value, $duration : timeValue)
		eval($duration > $periodTimeValue)
	then
		insertLogical(new IntConstraintOccurrence("lessonsDurationSumLePeriodDuration",
							ConstraintType.NEGATIVE_HARD, 1, 
							$lesson, $periodTimeValue));
end

//#
// 341. Максимально допустимое количество занятий в предшкольных классах не более четырех 
// продолжительностью 25 – 30 минут. Перерывы между занятиями должны быть не менее 10 минут.
//#
rule "beforeSchoolClassesMustHaveMaxFourLessonsInOneDay"
	when
		School( type == "School" )
		$clazz : Class( level == 0, $wxGroupName : wxGroupName)
		$lesson : Lesson(period != null, course.clazz.wxGroupName == $wxGroupName, $period : period )
		
		$lessonCount : Number(intValue > 4) from accumulate(
            $lesson2 : Lesson(period !=null, period.day == $period.day, course.clazz.wxGroupName == $wxGroupName)
            count($lesson2)
        )
	then
		insertLogical(new IntConstraintOccurrence("beforeSchoolClassesMustHaveMaxFourLessonsInOneDay",
							ConstraintType.NEGATIVE_HARD, 10, 
							$clazz, $lesson));
end


/*
// Availabilities: Each lesson in a period unavailable for that course.
/*rule "unavailablePeriodConstraint"
    when
        $unavailablePeriodConstraint : UnavailablePeriodConstraint($course : course, $period : period)
        $lesson : Lesson(course == $course, period == $period)
    then
    	insertLogical(new IntConstraintOccurrence("twoLessonSameTimeSameTeacher",
    						ConstraintType.NEGATIVE_HARD, 10, 
    						$unavailablePeriodConstraint, $lesson));
end
*/
// ############################################################################
// Soft constraints
// ############################################################################

//#
// 338. Проведение сдвоенных уроков в начальной школе не допускается. 
// Для учащихся 5 – 9 классов сдвоенные уроки допускаются только для проведения 
// лабораторных, контрольных работ, уроков труда, физкультуры целевого назначения
// (лыжи, плавание). В 10 – 11 (12) классах допускается проведение сдвоенных 
// уроков по основным и профильным предметам. 
//#
rule "repeatedLessonsInSameDayInSequentialOrder"
	when
		School( type == "School" )
		$lesson1 : Lesson($id : id, period != null, $period1 : period, $order1 : period.time.order, $course : course ) 
		$lesson2 : Lesson(id != $id, period != null, period.day == $period1.day, course == $course, $order2 : period.time.order)
		eval( ($order1 - $order2 != 1) || ($order1 - $order2 != -1))
	then
		insertLogical(new IntConstraintOccurrence("repeatedLessonsInSameDayInSequentialOrder", 
							ConstraintType.NEGATIVE_SOFT, 2,
							$lesson1, $lesson2));
end

//#
// 333. При составлении расписания уроков должны учитывать динамику умственной 
// работоспособности учащихся в течение дня и недели и используют таблицу 
// ранжирования предметов по трудности (в баллах) в соответствии с приложением 
// 17 к настоящим Санитарным правилам. 
//#
rule "metalPerformanceDuringDay1"
	when
		School( type == "School" )
		$lesson1 : Lesson(period != null, priority > 6, period.time.order > 5, $timeOrder : period.time.order, $priority : priority)
	then
		insertLogical(new IntConstraintOccurrence("metalPerformanceDuringDay1", 
							ConstraintType.NEGATIVE_SOFT, $priority,
							$lesson1,$timeOrder));
end
rule "metalPerformanceDuringDay2"
	when
		School( type == "School" )
		$lesson1 : Lesson(period != null, priority <= 6, period.time.order < 5)
	then
		insertLogical(new IntConstraintOccurrence("metalPerformanceDuringDay2", 
							ConstraintType.NEGATIVE_SOFT, 1,
							$lesson1));
end

//#
// 334. Учебная нагрузка для учащихся старших классов в течение недели распределяется так, 
// чтобы наибольший ее объем приходился на вторник или среду; для учащихся младших и средних 
// классов на вторник и четверг. В эти дни в школьное расписание включают наиболее трудные или 
// средние и легкие по трудности предметы, но в большем количестве, чем в остальные дни. 
// В среду предусматривают облегченный день. 
// Наименьшее число баллов за день должны быть на понедельник и субботу. 
//#
rule "metalPerformanceDuringWeek1"
	when
		School( type == "School" )
		$lesson1 : Lesson(period != null, course.clazz.level > 8, priority > 7, period.day.value in (1,6))
	then
		insertLogical(new IntConstraintOccurrence("metalPerformanceDuringWeek1", 
							ConstraintType.NEGATIVE_SOFT, 5,
							$lesson1));
end
rule "metalPerformanceDuringWeek2"
	when
		School( type == "School" )
		$lesson1 : Lesson(period != null, course.clazz.level < 9, priority > 7, period.day.value in (1,3,6))
	then
		insertLogical(new IntConstraintOccurrence("metalPerformanceDuringWeek2", 
							ConstraintType.NEGATIVE_SOFT, 5,
							$lesson1));
end

// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardConstraintsBroken($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
    	$negSoftTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
        $posTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.POSITIVE, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftConstraintsBroken($negSoftTotal.intValue()-$posTotal.intValue());
end
