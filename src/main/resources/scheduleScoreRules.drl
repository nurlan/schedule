package kz.bee.drools.planner.schedule.solver;
    dialect "java"

import org.drools.planner.core.score.buildin.hardandsoft.HardAndSoftScoreHolder;
import org.drools.planner.core.score.constraint.IntConstraintOccurrence;
import org.drools.planner.core.score.constraint.ConstraintType;

import kz.bee.drools.planner.schedule.domain.Lesson;
import kz.bee.drools.planner.schedule.domain.UnavailablePeriodConstraint;

global HardAndSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################
/*
//#
// Two lessons in the same room at the same period.
//#
rule "twoLessonSameTimeSameRoom"
	when
		$lesson1 : Lesson($id : id, $period : period, $room : room)
		$lesson2 : Lesson(id != $id, period == $period, room == $room)
	then
		insertLogical(new IntConstraintOccurrence("twoLessonSameTimeSameRoom", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end
*/
/*//#
// Two classes in the same room at the same period.
//#
rule "twoClassSameTimeSameRoom"
	when
		$lesson1 : Lesson($id : id, $period : period, $room : room, $clazz : course.clazz)
		$lesson2 : Lesson(id != $id, period == $period, room == $room, course.clazz != $clazz)
	then
		insertLogical(new IntConstraintOccurrence("twoClassSameTimeSameRoom",
							ConstraintType.NEGATIVE_HARD, 1, 
							$lesson1, $lesson2));
end
*/
//#
// 1 class(wx_group) in 2 lessons at the same period
//#
rule "oneClassInTwoLessonsInOnePeriod"
	when
		$lesson1 : Lesson($id : id, $period : period, $wxGroupName : course.clazz.wxGroupName, $clazz : course.clazz, $courseName : course.name ) 
		$lesson2 : Lesson(id != $id, period == $period, course.clazz.wxGroupName == $wxGroupName, course.clazz != $clazz, course.name != $courseName ) 
	then
		insertLogical(new IntConstraintOccurrence("oneClassInTwoLessonsInOnePeriod", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end

rule "oneClassInTwoLessonsInOnePeriod1"
	when
		$lesson1 : Lesson($id : id, $period : period, $wxGroupName : course.clazz.wxGroupName, $clazz : course.clazz, $courseName : course.name ) 
		$lesson2 : Lesson(id != $id, period == $period, course.clazz.wxGroupName == $wxGroupName, course.clazz == $clazz, course.name != $courseName ) 
	then
		insertLogical(new IntConstraintOccurrence("oneClassInTwoLessonsInOnePeriod1", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end

rule "oneClassInTwoLessonsInOnePeriod2"
	when
		$lesson1 : Lesson($id : id, $period : period, $clazz : course.clazz ) 
		$lesson2 : Lesson(id != $id, period == $period, course.clazz == $clazz ) 
	then
		insertLogical(new IntConstraintOccurrence("oneClassInTwoLessonsInOnePeriod2", 
							ConstraintType.NEGATIVE_HARD, 1,
							$lesson1, $lesson2));
end
/*
rule "oneClassInTwoLessonsInOnePeriod3"
	when
		$lesson1 : Lesson($id : id, $day : date, $course : course ) 
		$lesson2 : Lesson(id != $id, date == $day, course == $course ) 
	then
		insertLogical(new IntConstraintOccurrence("oneClassInTwoLessonsInOnePeriod3", 
							ConstraintType.NEGATIVE_HARD, 2,
							$lesson1, $lesson2));
end
*/

rule "noMoreThanTwoSameLessonsInOneDay"
	when
		$lesson : Lesson($id : id, $period : period, $clazz : course.clazz)
        $lessonCount : Number(intValue > 1) from accumulate(
            $lesson2 : Lesson(id != $id, period == $period, course.clazz == $clazz)
            count($lesson2)
        )
	then
		insertLogical(new IntConstraintOccurrence("noMoreThanTwoSameLessonsInOneDay", 
							ConstraintType.NEGATIVE_HARD, 2,
							$lesson, $lessonCount));
end

//#
// Two lessons at the same time or same room with a same teacher.
//#
rule "twoLessonSameTimeSameTeacher"
	when
		$lesson1 : Lesson($id : id, $period : period, $teacher : course.teacher)
		$lesson2 : Lesson(id != $id, period == $period, course.teacher == $teacher)
	then
		insertLogical(new IntConstraintOccurrence("twoLessonSameTimeSameTeacher",
							ConstraintType.NEGATIVE_HARD, 1, 
							$lesson1, $lesson2));
end
/*
// Availabilities: Each lesson in a period unavailable for that course.
/*rule "unavailablePeriodConstraint"
    when
        $unavailablePeriodConstraint : UnavailablePeriodConstraint($course : course, $period : period)
        $lesson : Lesson(course == $course, period == $period)
    then
    	insertLogical(new IntConstraintOccurrence("twoLessonSameTimeSameTeacher",
    						ConstraintType.NEGATIVE_HARD, 10, 
    						$unavailablePeriodConstraint, $lesson));
end
*/
// ############################################################################
// Soft constraints
// ############################################################################



// ############################################################################
// Calculate score
// ############################################################################

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setHardConstraintsBroken($hardTotal.intValue());
end

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Do the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        )
    then
        scoreHolder.setSoftConstraintsBroken($softTotal.intValue());
end
